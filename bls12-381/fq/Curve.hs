-- based on https://github.com/ethereum/py_ecc/blob/master/py_ecc/bls12_381/bls12_381_pairing.py
module Curve where
-- https://research.nccgroup.com/2020/07/06/pairing-over-bls12-381-part-1-fields/
-- this implementation is much faster (2-3x) than the Fqp one
-- it's built via towers extension of fields. Instead of having a single
-- modulus for 12-d polynomials, here we aggregate fields and each has own modulus

import Field
import Fq
import Fq2
import Fq6
import Fq12
import EllipticCurves
import FqConfig (fieldModulus)

-- BLS12 381 curve order
curveOrder = 52435875175126190479447740508185965837690552500527637822603658699938581184513

-- curve is y^2 = x^3 + 4
b = Fq 4
-- twisted curve over FQ2: y^2 = x^3 + 4(1 + i)
b2 = Fq2 4 4

-- generator for curve over FQ
g1 = Point (Fq 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507)
           (Fq 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569)

-- generator for twisted curve over FQ2
g2 = Point (Fq2 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160
                3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758)
           (Fq2 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905
                927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582)

twist O = O
twist (Point x1 y1) = Point wideX wideY
  where
  root  = Fq6 0 1 0
  wideX = Fq12 (Fq6 x1 0 0) 0 / Fq12 root 0
  wideY = Fq12 (Fq6 y1 0 0) 0 / Fq12 0 root

pairing = pairingGeneric fieldModulus curveOrder g2 15132376222941642752 b b2 twist (\_ _ (f, _) -> f)